# -*- coding: utf-8 -*-
"""ChallengeThrombin_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MBEcfVmmRF-bo2FM86JGc8HsDj3XVjT

Machine Learning LCG

Emmanuel Hernández Sánchez
                                                                                          Tamara López González

# CHALLENGE OF THROMBIN

Se identifica y aisla el receptor (trombina) objetivo del fármaco, y se prueban moléculas para determinar su capacidad al unirse (1909). Se separan compuestos activos (42 vinculantes) e inactivos (no vinculantes), y dicha determinación se usa para fármacos. Cada compuesto es un  vector de características con un valor de clase (A o I) y 139,351 características binarias.



            Determinar cuáles de las propiedades son críticas para predecir el valor de la clase.

### Librerías, función y datos
"""

import numpy as np
from collections import Counter
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix,classification_report, make_scorer

from sklearn.feature_selection import chi2, SelectKBest, mutual_info_classif
from sklearn.decomposition import TruncatedSVD
from sklearn.feature_selection import RFE

from imblearn.under_sampling import NearMiss, ClusterCentroids, EditedNearestNeighbours, AllKNN
from imblearn.over_sampling import SMOTE, ADASYN

# Función del análisis de rendimiento 
def analysis(Ypred, testY):
    print('\nAccuracy: {}\n'.format(accuracy_score(Ypred, testY)))
    print('Precision: {}\n'.format(precision_score(Ypred, testY, average = 'weighted')))
    print('Recall: {}\n'.format(recall_score(Ypred, testY, average = 'weighted')))
    print('F-score: {}\n'.format(f1_score(Ypred, testY, average = 'weighted')))
    print('\nConfusion matrix: \n')
    print(str(confusion_matrix(Ypred, testY)) + '\n')
    print('Classification report: \n')
    print(classification_report(Ypred, testY, target_names = ['A', 'I']) + '\n')

# Cargar el data set de entrenamiento
with open('Thrombin/thrombin.data', 'r') as file:
  train_set = file.readlines()
print('Se recuperaron: ', str(len(train_set)), ' líneas en el vector de entrenamiento.')


#Cargamos el data set de prueba
with open('Thrombin_2/Thrombin.testset', 'r') as file:
  test_set = file.readlines()
print('Se recuperaron: ', str(len(test_set)), ' líneas en el vector de prueba.')

with open('Thrombin_2/ThrombinKey', 'r') as file:
  test_class = file.readlines()
print('Se recuperaron: ', str(len(test_class)), ' clases en el vector de prueba.')

# Guardar datos 

train_data = []
train_class = []

for lines in train_set:
  lines = lines.replace("\n","")
  l = lines.split(",")
  train_class.append(l[0])
  l = l[1:]
  l = [int(i) for i in l]
  train_data.append(l)
    
train_data = np.array(train_data)
print("Datos de entretamiento: ")
print(len(train_data),"  ",len(train_class))

test_data=[]

for lines in test_set:
  lines = lines.replace("\n","")
  l = lines.split(",")[1:]
  l = [int(i) for i in l]
  test_data.append(l)
test_class = [i.replace("\n","") for i in test_class]

test_data = np.array(test_data)
print('Datos de test: ')
print(len(test_data),"  ",len(test_class))

# Verificar proporciones
print('Proporciones en los datos:')
print(sorted(Counter(train_class).items()))
print(sorted(Counter(test_class).items()))

allknn = AllKNN()
X_resampled, y_resampled = allknn.fit_resample(train_data, train_class)

print(sorted(Counter(y_resampled).items()))

estimator = SVC(kernel="linear")
#Reducimos las dimensiones a 50 de 150 en 150
rfe = RFE(estimator=estimator,n_features_to_select=500, step=600,verbose=0)
rfe.fit(X_resampled, y_resampled)
Ypred=rfe.predict(test_data)

analysis(Ypred, test_class)
